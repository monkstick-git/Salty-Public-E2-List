@name Slime V1
@inputs 
@outputs Debug HasSound
@persist E:entity Mul HasSound Target:entity Jumps
@trigger 
@model models/holograms/hq_rcube_thick.mdl
if(first() | duped())
{
    E = entity()
    Mul = entity():mass()
    HasSound = 0
    entity():setColor(vec(random(255),random(255),random(255)))
    Target = owner()
    
    for (I=1,10)
    {
     holoCreate(2 + I)   
     holoScale(2 + I,vec(1,1,0.01))
     holoAlpha(2 + I,0)
     holoModel(2 + I,"models/holograms/hq_rcylinder_thin.mdl")
    }

    FaceOffset = 3
    holoCreate(48)
    holoModel(48,"models/holograms/hq_hdome_thin.mdl")
    holoScale(48,vec(0.08,0.2,0.05))
    holoAng(48,ang(90,180,0))
    holoPos(48,entity():pos() + vec(-6,4,-2.5 + FaceOffset))
    holoColor(48,vec(240,130,240))
    holoParent(48,entity())
    
    holoCreate(49)
    holoModel(49,"models/holograms/hq_hdome_thin.mdl")
    holoScale(49,vec(0.08,0.2,0.05))
    holoAng(49,ang(90,180,0))
    holoPos(49,entity():pos() + vec(-6,-4,-2.5 + FaceOffset))
    holoColor(49,vec(240,130,240))
    holoParent(49,entity())
    
    holoCreate(50)
    holoModel(50,"models/sprops/misc/alphanum/alphanum_crt.mdl")
    holoScale(50,vec(0.2,0.2,0.2))
    holoAng(50,ang(0,90,0))
    holoPos(50,entity():pos() + vec(-5.8,-3,0 + FaceOffset))
    holoColor(50,vec(200,200,200))
    holoMaterial(50,"sprops/trans/wheels/wheel_d_rim1")
    holoParent(50,entity())
    
    holoCreate(51)
    holoModel(51,"models/sprops/misc/alphanum/alphanum_crt.mdl")
    holoScale(51,vec(0.2,0.2,0.2))
    holoAng(51,ang(0,90,0))
    holoPos(51,entity():pos() + vec(-5.8,3,0 + FaceOffset))
    holoColor(51,vec(200,200,200))
    holoMaterial(51,"sprops/trans/wheels/wheel_d_rim1")
    holoParent(51,entity())
    
    holoCreate(54)
    holoModel(54,"models/sprops/misc/alphanum/alphanum_d.mdl")
    holoScale(54,vec(0.3,0.4,0.3))
    holoAng(54,ang(270,90,0))
    holoPos(54,entity():pos() + vec(-5.5,0,-1))
    holoColor(54,vec(200,200,200))
    holoMaterial(54,"sprops/trans/wheels/wheel_d_rim1")
    holoParent(54,entity())
}

runOnTick(1)
interval(500)

if(clk())
{
    # Uncomment these two lines to make the Chip follow the closest person #
    #Find = findByClass("player") 
    #Target = findClosest(entity():pos())
    Force = ((Target:pos() - entity():pos()) * vec(1,1,0))
    
    if(Force:length() > 100 & HasSound == 1 & Force:length() < 10000)
    {
        E:applyForce(vec(0,0,(Mul * 1500)/Debug) + ((Mul * 1 * Force) / Debug))
        HasSound = 0
    }
    elseif(Force:length() > 1000 & Force:length() < 5000)
    {
         E:applyForce(vec(0,0,(Mul * 30500)/Debug) + ((Mul * 35 * Force) / Debug))
    }
    elseif(Force:length() > 5000)
    {
        E:setPos(Target:pos() + vec(0,0,50))
    }
    
} 

if(tickClk())
{
    Check = rangerOffset(1000000,entity():pos(),-vec(0,0,100))
    Debug = Check:distance()
    
    if(Debug < 10 & HasSound == 0)
    {
        Int = random(100)
        entity():soundPlay(Int,0.5,"player/recharged.wav")
        soundPitch(Int,random(50,140))
        HasSound = 1      
        RandColor = vec(random(255),random(255),random(255))
        entity():setColor(RandColor)
        
        Jumps = Jumps + 1
        holoPos(2 + Jumps,entity():pos() + vec(0,0,-9))
        holoColor(2 + Jumps,RandColor)
        holoAlpha(2 + Jumps,150)
        holoAng(2 + Jumps,entity():angles() * ang(0,1,0))
        
        if(Jumps >= 10)
        {
         Jumps = 1   
        }
    } 
}

