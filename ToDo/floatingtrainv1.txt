@name FloatingTrainV1
@inputs UP DOWN W S
@outputs In SCREEN2
@persist A Split:ranger Split2:ranger S1 SPEED
@trigger 
interval(1)
if(first()|duped()){E=entity():isWeldedTo() holoCreate(1) holoCreate(2) holoCreate(3) holoModel(1,"hq_sphere") holoScale(1,vec(0.3,0.3,0.3)) holoColor(1,vec(0,0,180)) holoModel(2,"models/props_phx/trains/wheel_medium.mdl") holoScale(2,vec(0.3,0.3,0.3)) holoColor(2,vec(0,0,180)) holoModel(3,"models/props_phx/trains/wheel_medium.mdl") holoScale(3,vec(0.3,0.3,0.3)) holoColor(3,vec(0,0,180))
holoCreate(4) holoCreate(5)
holoModel(4,"models/props_phx/trains/wheel_medium.mdl") holoScale(4,vec(0.3,0.3,0.3)) holoColor(4,vec(0,0,180)) holoModel(5,"models/props_phx/trains/wheel_medium.mdl") holoScale(5,vec(0.3,0.3,0.3)) holoColor(5,vec(0,0,180))    
}
if(UP ==1){
 S1=S1+0.1   
}
if(DOWN==1){
 S1=S1-0.1   
}
In=S1
rangerFilter(entity():isWeldedTo())
if((W==1|S==1)&Split:hit() & Split2:hit()){RangerData = rangerOffset(50,entity():isWeldedTo():pos()+entity():isWeldedTo():forward()*-S1*(W-S),-entity():isWeldedTo():up())}else{RangerData = rangerOffset(50,entity():isWeldedTo():pos(),-entity():isWeldedTo():up())}
holoPos(1, RangerData:pos())
#if(RangerData:hit()) { HitPos = RangerData:position() }
Split = rangerOffset(300,RangerData:pos()+vec(0,0,5),entity():isWeldedTo():right())
holoPos(2, Split:pos())
Split2 = rangerOffset(300,RangerData:pos()+vec(0,0,5),-entity():isWeldedTo():right())
holoPos(3, Split2:pos() )
Split3 = rangerOffset(300,RangerData:pos()+vec(0,0,5)-entity():isWeldedTo():forward()*100,entity():isWeldedTo():right())
holoPos(4, Split3:pos())
Split4 = rangerOffset(300,RangerData:pos()+vec(0,0,5)-entity():isWeldedTo():forward()*100,-entity():isWeldedTo():right())
holoPos(5, Split4:pos() )
Ang=((Split:pos() + Split2:pos())  / 2 - (Split3:pos() + Split4:pos()) / 2):toAngle()
entity():isWeldedTo():setAng(Ang)

if(Split:hit() & Split2:hit()) { entity():isWeldedTo():setPos((Split:pos() + vec(0,0,20) + Split2:pos() + vec(0,0,20))/2) }



SPEED=toUnit("mph", entity():vel():length())
SCREEN2=SPEED
entity():setText(S1:toString())
