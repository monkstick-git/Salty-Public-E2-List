@name ApplyAng - Aim v2
@inputs Pod:entity Gun:entity Gunb:entity
@outputs
@persist Dran:ranger Gof:vector Gofb:vector Chk Hv:vector Run Ranger:ranger
@persist Trg:vector Gfa Gfb
@trigger 

#You're welcome.

interval(1)

if(first() | dupefinished())
{
    #Gun forces for the first and second gun, respectively. Increase
    #for larger size guns, obviously.
    Gfa = 5
    Gfb = 5
    
        E = entity():isWeldedTo()
    holoCreate(1)
    holoScale(1, vec(1,1,1))
    holoColor(1, vec(255,0,0))
    holoModel(1,"sphere")
}

if(Pod:driver())
{
    if(!Run)
    {
        Run = 1
       # holoCreate(entity():id(), entity():pos())
        #holoParent(entity():id(), Pod)
       # holoScale(entity():id(), vec(0.05, 0.05, 0.05))
      # holoModel(entity():id(), "hqsphere2")
      #  holoAlpha(entity():id(), 200)                           #HOLO APLHA COLOR
    }
    Dran = rangerOffset(60000, Pod:driver():shootPos() + Pod:driver():eye() * 200, Pod:driver():eye())
    Trg = (Dran:position() - Pod:driver():shootPos()):normalized()
  #  holoPos(entity():id(), Pod:driver():shootPos()+Trg * 15)
    if(Dran:entity())
    {
     #   holoColor(entity():id(), vec(0, 255, 0))
    }
    else
    {#
       # holoColor(entity():id(), vec(255, 0, 0))
    }
    if(Gun)
    {
        Gof = (Dran:position() - Gun:massCenter()):normalized() - Gun:forward()
        Gun:applyOffsetForce((Gof + $Gof * 8) * Gfa * Gun:mass(), Gun:massCenter() + Gun:forward() * 200)
        Gun:applyOffsetForce((Gof + $Gof * 8) * -Gfa * Gun:mass(), Gun:massCenter() + Gun:forward() * -200)
    }
    if(Gunb)
    {
        Gofb = (Dran:position() - Gunb:massCenter()):normalized() - Gunb:forward()
        Gunb:applyOffsetForce((Gofb + $Gofb * 8) * Gfb * Gunb:mass(), Gunb:massCenter() + Gunb:forward() * 200)
        Gunb:applyOffsetForce((Gofb + $Gofb * 8) * -Gfb * Gunb:mass(), Gunb:massCenter() + Gunb:forward() * -200)
    }
}
else
{
    if(Run)
    {
     #   holoDelete(entity():id())
        Run = 0
    }
}

rangerFilter(Gun)
Ranger = rangerOffset(10000,Gun:pos(), Gun:forward())

holoPos(1, Ranger:pos())
#holoAng(1, Gun:angles())
