@name Fractal
@persist Point:vector2 Pixel:vector2 ScreenSize:vector2
@persist Zoom VeiwPos:vector2 MaxIt Colors:array
@inputs Screen:wirelink

interval(10)

if (first()) {
    #Position/zoom
    Zoom = 0.5
    VeiwPos = vec2(0,0)
    
    #Higher numbers will add detail.
    #If it is too high, it will crash the E2.
    MaxIt = 400
    
    #An array of colors that will be used.
    #                  R--G--B-- 
    Colors[1,number] = 255255000
    Colors[2,number] = 255000255
    
    #Dont mess with this.
    ScreenSize = vec2(Screen[1048573],Screen[1048572])
    Pixel = vec2(1,1)
    #Clear Screen
    Screen[1048574] = 1
    #Set Color Fmt
    Screen[1048569] = 2
}

if (clk()) {
    while (perf()) {
        Point = (Pixel - ScreenSize / 2)/(ScreenSize/2)/Zoom + VeiwPos
        Z = comp(Point:x(),Point:y())
        
        #You can specify a value for C, if you want.
        C = Z
        
        Iteration = 0
        
        while (Iteration < MaxIt & sqrt(real(Z)^2 + imag(Z)^2) < 4) {
            #You can change the function here.
            #You can find a list of them at:
            #http://www.lifesmith.com/formulas.html
            #You can only use ones with the vars Z and C.
            
            Z = (abs(real(Z)) + i() * abs(imag(Z)))^2 + C
            Iteration++
        }
        
        if (Iteration == MaxIt) {Color = 0}
        else{Color = Colors[Iteration%(Colors:count())+1,number]}
        
        Screen[((Pixel:y() - 1) * ScreenSize:x()) + (Pixel:x() - 1)] = Color
        
        if (Pixel == ScreenSize) {}
        elseif (Pixel:x() == ScreenSize:x()) {Pixel = vec2(1,Pixel:y() + 1)}
        else {Pixel = Pixel:setX(Pixel:x() + 1)}
    }
}
