@name Gearbox r9 CVT
@inputs Crankshaft:entity SUp SDn DriveMode
@inputs [TireFrontLeft TireFrontRight TireRearLeft TireRearRight]:entity
@outputs Gear

#change to @output to display debug info
@persist Ratio RPM [CAV TireAngVel]:angle [TireRPMs]:array

#variables
@persist Force AVR DAVR CMul TMul
@persist [Tick Avg]:array Time
@persist CVT CVT_RatioMin CVT_RatioMax CVT_RatioRange CVT_MaxAngVel
@persist CrankShaftMul CrankShaftMulCap TireMul TireMulCap CapFactor ForceCap
@persist NumGears Gr G1 G2 G3 G4 G5 G6 DEBUG DirFL DirFR DirRL DirRR DirCS
@persist FWD RWD AWD FL FR RL RR
@trigger SUp SDn DriveMode

#--
# [AP]Damnation's E2 Gearbox
#
# Notes:
# -If you engine is going through gears too fast, try lowering the power output of your engine
# -If you're spinning out, reduce TireMul or gear ratios. Too much torque!
#
# To Wire:
# -Place your inputs of choice for shifting gears, and 4 entity markers.
# -Link one marker to the engine crankshaft, and link the other markers to the wheels.
# -Wire 'Crankshaft' to the crankshaft emarker, and wheel inputs to their respective wheel emarkers.
# -You may have to edit the chip a bit to get it working for your setup, i.e. changing the angles used from pitch to yaw depending on how your props are oriented.
#
# Tuning the multipliers
# -Start by seting both tiremul and crankshaftmul to 1
# -Freezing the tires so they can't rotate, but let ALL the engine parts (pistons, crankshaft, engine block, etc) move freely so you can see if the engine will spaz
# -Work with crankshaftmul first
# -Increase crankshaftmul until the the engine has a hard time moving
# -Generally you'll want to have the mul just below the point the engine starts spazzing, making sure it's below that point far enough that it runs smoothly.
# -Once crankshaftmul is set right, you can unfreeze the car and drive it to test tiremul
# -Increase tiremul until you have the desired amount of torque
# 
# Troubleshooting
# -Turn on debug mode to help make sure everything is oriented properly.
# -Make sure your tiremul and crankshaft mul aren't too high for the weight of the props.
#--

if (first()|duped()){#|dupefinished()) {
    #setup variables and constants, ignore them
    Time=curtime()
    Tick=array(0,0,0,0,0)
    Avg=array(0,0,0,0,0)
    TireRPMs=array(0,0,0,0)
    Gear=0
    FWD=1 AWD=0 RWD=-1
    FL=1 FR=2 RL=3 RR=4
    
    #Set the drive mode here to all wheel, rear wheel, or front wheel drive
    #You can use the input to set the drive mode on the fly; if you do the value here will be ignored. Input -1 for RWD, 0 for AWD, and 1 for FWD
    #Possible choices are:
    # AWD   for all wheel drive
    # RWD   for rear wheel drive
    # FWD   for front wheel drive
    if (!->DriveMode) {
        DriveMode = RWD
    }
    
    #changing these affects torque and slippage, but too high can cause spazzing
    #higher tire mul = more torque and slightly more slippage
    #higher crankshaft mul = less slippage and slightly less torque
    #light parts require smaller muls
    #example muls that worked for me:
    #tiremul=400 @ 256 weight tires, crankshaftmul=8 @ 100 weight crankshaft + 12x 5 weight pistons
    TireMul = 40
    CrankShaftMul = 8
    
    #Set the maximum value for the force multipliers
    #prevents spaz, but too low can reduce torque or increase slippage
    CapFactor = 6
    
    #mul cap calc, don't change
    TireMulCap = CapFactor * TireMul
    CrankShaftMulCap = CapFactor * CrankShaftMul
    
    #set angforce cap, helps prevent spaz but can affect torque on high gears
    ForceCap = 50000
    
    #Set CVT (continuously variable transmission)
    #if 1, the gear ratio will auto-adjust to the current crankshaft rpms
    CVT=0
    
    #minimum gear ratio for CVT mode
    CVT_RatioMin = 0.25
    
    #ratio at max angular velocity
    CVT_RatioMax = 1.25
    
    #max angular velocity (affects the rpm where max ratio is reached)
    CVT_MaxAngVel = 3636.3636
    
    #ratio range calc, don't change
    CVT_RatioRange = CVT_RatioMax - CVT_RatioMin
    
    #set number of forward gears to use (not counting Neutral or Reverse)
    #no effect in CVT mode
    NumGears = 6
    
    #Adjust the gear ratios here
    #typical vehicle ratio may be like 0.5 Reverse, .5, .75, 1, 1.33, 1.66, 2, 2.5
    #crawler might be like 0.25 reverse, 0.1, 0.2, 0.35, 0.5, 0.75, 1
    #gears can also be set as wheel_turns/crankshaft_turns
    #  i.e. 1/4 for a 1:4 ratio of wheel:crankshaft
    #only Gr used in CVT mode
    Gr = 0.25
    G1 = 0.2
    G2 = 0.4
    G3 = 0.6
    G4 = 0.8
    G5 = 1
    G6 = 1.33
    
    #direction of wheels, don't change unless needed
    DirFL=-1
    DirFR=-1
    DirRL=-1
    DirRR=-1
    DirCS=1
    
    DEBUG = 1
    if (DEBUG) {
        hint("Gearbox debugging on.",3)
        #The chip assumes the tires rotate around the Z axis of the tire prop.
        #The chip assumes the tire up vector is facing away from the car.
        #if the hologram is under or inside the car, set the corresponding Dir (i.e. DirFL) to -1
        
        #The chip assumes the crankshaft rotates around the X axis of the crankshaft prop.
        #The chip assumes the crankshaft rotates clockwise when the right vector points toward the rear of the car
        #rotate the engine so the hologram points rear (or visualize it rotated); if the crankshaft rotates counter-clockwise, set DirCS to -1
        if (->TireFrontLeft) {
            if (TireFrontLeft) {
                holoCreate(1)
                holoPos(1,TireFrontLeft:boxCenterW()+TireFrontLeft:up()*32*DirFL)
            } else { print("Front Left tire entity isn't linked to e-marker.") }
        } else { print("Front Left tire input isn't wired to e-marker.") }
        
        if (->TireFrontRight) {
            if (TireFrontRight) {
                holoCreate(2)
                holoPos(2,TireFrontRight:boxCenterW()+TireFrontRight:up()*32*DirFR)
            } else { print("Front Right tire entity isn't linked to e-marker.") }
        } else { print("Front Right tire input isn't wired to e-marker.") }
        
        if (->TireRearLeft) {
            if (TireRearLeft) {
                holoCreate(3)
                holoPos(3,TireRearLeft:boxCenterW()+TireRearLeft:up()*32*DirRL)
            } else { print("Rear Left tire entity isn't linked to e-marker.") }
        } else { print("Rear Left tire input isn't wired to e-marker.") }
        
        if (->TireRearRight) {
            if (TireRearRight) {
                holoCreate(4)
                holoPos(4,TireRearRight:boxCenterW()+TireRearRight:up()*32*DirRR)
            } else { print("Rear Right tire entity isn't linked to e-marker.") }
        } else { print("Rear Right tire input isn't wired to e-marker.") }
        
        if (->Crankshaft) {
            if (Crankshaft) {
                holoCreate(5)
                holoPos(5,Crankshaft:boxCenterW()+Crankshaft:right()*32*DirCS)
            } else { print("Crankshaft entity isn't linked to e-marker.") }
        } else { print("Crankshaft input isn't wired to e-marker.") }
    }
}

runOnTick(1)

if (SUp&~SUp&Gear<(CVT ? 1 : NumGears)) { Gear++ Crankshaft:soundPlay(12,0,"physics/metal/paintcan_impact_hard3.wav")}
if (SDn&~SDn&Gear>-1) { Gear-- Crankshaft:soundPlay(12,0,"physics/metal/paintcan_impact_hard3.wav")}
if (~DriveMode) {DriveMode = clamp(floor(DriveMode),-1,1) Crankshaft:soundPlay(12,0,"physics/metal/paintcan_impact_hard3.wav") }

if (tickClk()) {
    #get tire rpms
    TireRPMs[FL,angle]=TireFrontLeft:angVel() * DirFL
    TireRPMs[FR,angle]=-TireFrontRight:angVel() * DirFR
    TireRPMs[RL,angle]=TireRearLeft:angVel() * DirRL
    TireRPMs[RR,angle]=-TireRearRight:angVel() * DirRR
    
    #calculations for rpm
    Time=curtime()
    Tick:shift()
    Avg:shift()
    Tick[5,number]=$Time
    if (DriveMode == RWD) {
        TireAngVel = (TireRPMs[RL,angle]+TireRPMs[RR,angle])/2
    } elseif (DriveMode == FWD) {
        TireAngVel = (TireRPMs[FL,angle]+TireRPMs[FR,angle])/2
    } elseif (DriveMode == AWD) {
        TireAngVel = (TireRPMs[FL,angle]+TireRPMs[FR,angle]+TireRPMs[RL,angle]+TireRPMs[RR,angle])/4
    } else { print("omgwat") }
    Avg[5,number]=vec(TireAngVel):length()
    RPM = Avg:average() * (1/Tick:average()) / 360
    
    #calculate ratios
    CVT_Ratio = (Crankshaft:angVelVector():length()/CVT_MaxAngVel)*CVT_RatioRange + CVT_RatioMin
    Geared_Ratio = select(Gear,G1,G2,G3,G4,G5,G6)
    
    #get appropriate ratio for geared, cvt, or reverse
    Ratio = Gear<=0 ? -Gr : CVT ? CVT_Ratio : Geared_Ratio
    
    #calculate the rpms with gearing applied
    CAV = Crankshaft:angVel() * DirCS
    AVR = Ratio*CAV:pitch()-TireAngVel:yaw()
    
    #delta seems to make spazzing worse with very light cars
    #feel free to try with delta on and see if it helps any
    DAVR = 0
    #DAVR = ($AVR)/4 
    
    #calculate force needed to achieve gear ratio, and clamp it to sane values
    #sign(gear) handles the reverse and neutral gearings
    Force=clamp(sign(Gear)*(AVR + DAVR), -ForceCap,ForceCap)
    
    #calculate multipliers and clamp them
    TMul = clamp(Gear<=0 ? -TireMul/Gr : TireMul/Ratio, -TireMulCap,TireMulCap)
    CMul = clamp(Gear<=0 ? CrankShaftMul/Gr : CrankShaftMul/Ratio, -CrankShaftMulCap,CrankShaftMulCap)
    
    #apply resistance force to crankshaft
    Crankshaft:applyAngForce(ang(-Force*CMul,0,0))
    
    #apply engine power to tires
    Power = ang(0,Force*TMul,0)
    if (DriveMode==AWD|DriveMode==FWD) {
        TireFrontLeft:applyAngForce(Power * DirFL)
        TireFrontRight:applyAngForce(-Power * DirFR)
    }
    if (DriveMode==AWD|DriveMode==RWD) {
        TireRearLeft:applyAngForce(Power * DirRL)
        TireRearRight:applyAngForce(-Power * DirRR)
    }
}
