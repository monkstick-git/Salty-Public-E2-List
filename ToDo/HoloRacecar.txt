@name HoloRacecar
@inputs 
@outputs OutSpeed Pos:vector Ang:angle Parent:entity
@persist Speed Range Ops TurnAng Iterations SlowDown DeltaSpeed OutSpeed Q Pitch Mul RangeMul
@trigger  

if(first() | duped())
{
OutSpeed = 0



LocalAng = -90

Col = vec(random(0,255),random(0,255),random(0,255))

holoCreate(1)
holoCreate(2)
#holoScale(2,vec(0.2,0.2,0.2))
holoEntity(1):setTrails(5,5,50,"trails/physbeam",Col,255)
holoCreate(3)
#holoScale(3,vec(0.3,0.3,0.3))
holoPos(1,entity():pos() +vec(0,0,0.1))
holoAng(1,ang(0,LocalAng,0))
holoScale(1,vec(0.4,0.4,0.4))    

holoCreate(4)

holoCreate(10)
#holoScale(10,vec(0.2,0.2,0.2))
holoModel(10,"models/props/de_nuke/car_nuke.mdl")
#holoParent(10,entity())

holoCreate(100)
holoPos(100,holoEntity(10):pos()+vec(0,1,13))
holoParent(100,holoEntity(10))

holoCreate(11)
#holoScale(11,vec(0.2,0.2,0.2))
holoModel(11,"models/props/de_nuke/car_nuke_glass.mdl")
holoParent(11,10)

holoAng(10,ang(0,LocalAng - 90,0))
holoParent(10,entity())

holoParent(10,1)

Speed = random(55,60)
Mul = random(0,0.1)
TurnAng = 0.01
RangeMul = 80
setName("[Salty] - Holo Race car")
holoAlpha(1,0)
holoAlpha(2,0)
holoAlpha(3,0)
holoAlpha(4,0)
holoAlpha(100,0)

holoColor(10,Col)

Parent=holoEntity(100)

holoEntity(1):soundPlay(100,0,"acf_extra/vehiclefx/engines/v8/ClevV8_onhighEX.wav")


}

runOnTick(1)

if(tickClk())
{
   # Range = (Speed * 20)
  TurnAng = 0.04
		RangerLeft = rangerOffset(10000,holoEntity(1):pos(),((holoEntity(1):forward() + holoEntity(1):right())/2) * 100000 )
		holoPos(2,RangerLeft:position())

		RangerRight = rangerOffset(10000,holoEntity(1):pos(),((holoEntity(1):forward() + -holoEntity(1):right())/2) * 100000 )
		holoPos(3,RangerRight:position())

		Ranger = rangerOffset(Range,holoEntity(1):pos(),holoEntity(1):forward() * 100 )
		rangerFilter(holoEntity(1))

holoPos(4,Ranger:position())


		while(Ranger:hit() & (Iterations < 50) )
		{
    TurnAng = clamp(TurnAng + ( clamp( (Range - Ranger:distance()) / 300000,0,0.1) ),0,1)
   # if(Ranger:distance() < 1){Speed = Speed - 0.1}
		Iterations = Iterations + 1
		if(floor(RangerRight:distance()) > floor(RangerLeft:distance())){
		Amount = TurnAng + Mul
		}else{
		Amount = (-TurnAng - Mul)
		}
		
		if( floor(RangerRight:distance()) == floor(RangerLeft:distance())){
		Amount = random(-180,180)   
		}

    if(Ranger:distance() < 1){Amount = 180}

		holoAng(1,holoEntity(1):angles() + ang(0,Amount + Mul,0))
		}
		Iterations = 0

			if(Ranger:hit() == 0){
        OutSpeed = clamp(OutSpeed + (Speed / 300),0,Speed)
								holoPos(1,holoEntity(1):pos() + (holoEntity(1):forward() * (OutSpeed)))
			}
			else
			{
        OutSpeed = clamp(OutSpeed - 2,10,Speed)
				holoPos(1,holoEntity(1):pos() + (holoEntity(1):forward() * (OutSpeed)))
			}
			if(Ranger:distance() < 1){Amount = 180}
			holoAng(1,holoEntity(1):angles() + ang(0,Amount,0))
		

if(OutSpeed <= 10){Gear = 1}
if(OutSpeed > 10){Gear = 2}
if(OutSpeed > 20){Gear = 3}
if(OutSpeed > 30){Gear = 4}
if(OutSpeed > 40){Gear = 5}
if(OutSpeed > 50){Gear = 6}

soundPitch(100,30+OutSpeed*(clamp(10 - (Gear * 1.5),3,10)))
soundVolume(100,255)

Range = (OutSpeed * RangeMul)
Ang = holoEntity(1):toWorld(ang(0,0,0))

#Pos = holoEntity(1):pos() - vec(0,0,0)
Pos = vec(0,0,0)
}
